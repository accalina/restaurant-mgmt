// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/accalina/restaurant-mgmt/app/model"
	mock "github.com/stretchr/testify/mock"
)

// MenuService is an autogenerated mock type for the MenuService type
type MenuService struct {
	mock.Mock
}

// CreateMenu provides a mock function with given fields: ctx, data
func (_m *MenuService) CreateMenu(ctx context.Context, data model.MenuCreateOrUpdateModel) (*model.MenuResponse, error) {
	ret := _m.Called(ctx, data)

	var r0 *model.MenuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MenuCreateOrUpdateModel) (*model.MenuResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.MenuCreateOrUpdateModel) *model.MenuResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MenuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.MenuCreateOrUpdateModel) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMenu provides a mock function with given fields: ctx, id
func (_m *MenuService) DeleteMenu(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllMenu provides a mock function with given fields: ctx, filter
func (_m *MenuService) GetAllMenu(ctx context.Context, filter *model.MenuFilter) ([]model.MenuResponse, model.Meta, error) {
	ret := _m.Called(ctx, filter)

	var r0 []model.MenuResponse
	var r1 model.Meta
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.MenuFilter) ([]model.MenuResponse, model.Meta, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.MenuFilter) []model.MenuResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.MenuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.MenuFilter) model.Meta); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(model.Meta)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.MenuFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDetailMenu provides a mock function with given fields: ctx, id
func (_m *MenuService) GetDetailMenu(ctx context.Context, id string) (*model.MenuResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.MenuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.MenuResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.MenuResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MenuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMenu provides a mock function with given fields: ctx, data
func (_m *MenuService) UpdateMenu(ctx context.Context, data model.MenuCreateOrUpdateModel) (*model.MenuResponse, error) {
	ret := _m.Called(ctx, data)

	var r0 *model.MenuResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.MenuCreateOrUpdateModel) (*model.MenuResponse, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.MenuCreateOrUpdateModel) *model.MenuResponse); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.MenuResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.MenuCreateOrUpdateModel) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenuService interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuService creates a new instance of MenuService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuService(t mockConstructorTestingTNewMenuService) *MenuService {
	mock := &MenuService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
