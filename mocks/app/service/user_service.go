// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/accalina/restaurant-mgmt/app/model"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserService) Delete(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Demote provides a mock function with given fields: ctx, id
func (_m *UserService) Demote(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx
func (_m *UserService) FindAll(ctx context.Context) []model.UserModel {
	ret := _m.Called(ctx)

	var r0 []model.UserModel
	if rf, ok := ret.Get(0).(func(context.Context) []model.UserModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.UserModel)
		}
	}

	return r0
}

// FindById provides a mock function with given fields: ctx, id
func (_m *UserService) FindById(ctx context.Context, id string) (model.UserModel, error) {
	ret := _m.Called(ctx, id)

	var r0 model.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.UserModel, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.UserModel); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.UserModel)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Login provides a mock function with given fields: ctx, username, password
func (_m *UserService) Login(ctx context.Context, username string, password string) (model.ResponseLogin, error) {
	ret := _m.Called(ctx, username, password)

	var r0 model.ResponseLogin
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.ResponseLogin, error)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.ResponseLogin); ok {
		r0 = rf(ctx, username, password)
	} else {
		r0 = ret.Get(0).(model.ResponseLogin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, username
func (_m *UserService) Logout(ctx context.Context, username string) {
	_m.Called(ctx, username)
}

// Promote provides a mock function with given fields: ctx, id
func (_m *UserService) Promote(ctx context.Context, id string) bool {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Register provides a mock function with given fields: ctx, _a1
func (_m *UserService) Register(ctx context.Context, _a1 model.UserCreateModel) model.UserCreateModel {
	ret := _m.Called(ctx, _a1)

	var r0 model.UserCreateModel
	if rf, ok := ret.Get(0).(func(context.Context, model.UserCreateModel) model.UserCreateModel); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(model.UserCreateModel)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, _a1, id
func (_m *UserService) Update(ctx context.Context, _a1 model.UserUpdateModel, id string) model.UserUpdateModel {
	ret := _m.Called(ctx, _a1, id)

	var r0 model.UserUpdateModel
	if rf, ok := ret.Get(0).(func(context.Context, model.UserUpdateModel, string) model.UserUpdateModel); ok {
		r0 = rf(ctx, _a1, id)
	} else {
		r0 = ret.Get(0).(model.UserUpdateModel)
	}

	return r0
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
