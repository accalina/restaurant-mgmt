// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	repository "github.com/accalina/restaurant-mgmt/app/repository"
	mock "github.com/stretchr/testify/mock"
	gorm "gorm.io/gorm"
)

// RepoSQL is an autogenerated mock type for the RepoSQL type
type RepoSQL struct {
	mock.Mock
}

// FoodRepo provides a mock function with given fields:
func (_m *RepoSQL) FoodRepo() repository.FoodRepository {
	ret := _m.Called()

	var r0 repository.FoodRepository
	if rf, ok := ret.Get(0).(func() repository.FoodRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.FoodRepository)
		}
	}

	return r0
}

// GetDB provides a mock function with given fields:
func (_m *RepoSQL) GetDB() *gorm.DB {
	ret := _m.Called()

	var r0 *gorm.DB
	if rf, ok := ret.Get(0).(func() *gorm.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gorm.DB)
		}
	}

	return r0
}

// InvoiceRepo provides a mock function with given fields:
func (_m *RepoSQL) InvoiceRepo() repository.InvoiceRepository {
	ret := _m.Called()

	var r0 repository.InvoiceRepository
	if rf, ok := ret.Get(0).(func() repository.InvoiceRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.InvoiceRepository)
		}
	}

	return r0
}

// MenuRepo provides a mock function with given fields:
func (_m *RepoSQL) MenuRepo() repository.MenuRepository {
	ret := _m.Called()

	var r0 repository.MenuRepository
	if rf, ok := ret.Get(0).(func() repository.MenuRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.MenuRepository)
		}
	}

	return r0
}

// OrderItemRepo provides a mock function with given fields:
func (_m *RepoSQL) OrderItemRepo() repository.OrderItemRepository {
	ret := _m.Called()

	var r0 repository.OrderItemRepository
	if rf, ok := ret.Get(0).(func() repository.OrderItemRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.OrderItemRepository)
		}
	}

	return r0
}

// OrderRepo provides a mock function with given fields:
func (_m *RepoSQL) OrderRepo() repository.OrderRepository {
	ret := _m.Called()

	var r0 repository.OrderRepository
	if rf, ok := ret.Get(0).(func() repository.OrderRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.OrderRepository)
		}
	}

	return r0
}

// TableRepo provides a mock function with given fields:
func (_m *RepoSQL) TableRepo() repository.TableRepository {
	ret := _m.Called()

	var r0 repository.TableRepository
	if rf, ok := ret.Get(0).(func() repository.TableRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.TableRepository)
		}
	}

	return r0
}

// UserRepo provides a mock function with given fields:
func (_m *RepoSQL) UserRepo() repository.UserRepository {
	ret := _m.Called()

	var r0 repository.UserRepository
	if rf, ok := ret.Get(0).(func() repository.UserRepository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserRepository)
		}
	}

	return r0
}

type mockConstructorTestingTNewRepoSQL interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepoSQL creates a new instance of RepoSQL. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepoSQL(t mockConstructorTestingTNewRepoSQL) *RepoSQL {
	mock := &RepoSQL{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
