// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	service "github.com/accalina/restaurant-mgmt/app/service"
	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Food provides a mock function with given fields:
func (_m *Service) Food() service.FoodService {
	ret := _m.Called()

	var r0 service.FoodService
	if rf, ok := ret.Get(0).(func() service.FoodService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.FoodService)
		}
	}

	return r0
}

// Invoince provides a mock function with given fields:
func (_m *Service) Invoince() service.InvoiceService {
	ret := _m.Called()

	var r0 service.InvoiceService
	if rf, ok := ret.Get(0).(func() service.InvoiceService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.InvoiceService)
		}
	}

	return r0
}

// Menu provides a mock function with given fields:
func (_m *Service) Menu() service.MenuService {
	ret := _m.Called()

	var r0 service.MenuService
	if rf, ok := ret.Get(0).(func() service.MenuService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.MenuService)
		}
	}

	return r0
}

// Order provides a mock function with given fields:
func (_m *Service) Order() service.OrderService {
	ret := _m.Called()

	var r0 service.OrderService
	if rf, ok := ret.Get(0).(func() service.OrderService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.OrderService)
		}
	}

	return r0
}

// OrderItem provides a mock function with given fields:
func (_m *Service) OrderItem() service.OrderItemService {
	ret := _m.Called()

	var r0 service.OrderItemService
	if rf, ok := ret.Get(0).(func() service.OrderItemService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.OrderItemService)
		}
	}

	return r0
}

// Table provides a mock function with given fields:
func (_m *Service) Table() service.TableService {
	ret := _m.Called()

	var r0 service.TableService
	if rf, ok := ret.Get(0).(func() service.TableService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.TableService)
		}
	}

	return r0
}

// User provides a mock function with given fields:
func (_m *Service) User() service.UserService {
	ret := _m.Called()

	var r0 service.UserService
	if rf, ok := ret.Get(0).(func() service.UserService); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(service.UserService)
		}
	}

	return r0
}

type mockConstructorTestingTNewService interface {
	mock.TestingT
	Cleanup(func())
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewService(t mockConstructorTestingTNewService) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
