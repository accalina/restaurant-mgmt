// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/accalina/restaurant-mgmt/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/accalina/restaurant-mgmt/model"
)

// FoodRepository is an autogenerated mock type for the FoodRepository type
type FoodRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, filter
func (_m *FoodRepository) Count(ctx context.Context, filter *model.FoodFilter) int {
	ret := _m.Called(ctx, filter)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *model.FoodFilter) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, filter
func (_m *FoodRepository) FindAll(ctx context.Context, filter *model.FoodFilter) ([]entity.Food, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.FoodFilter) ([]entity.Food, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.FoodFilter) []entity.Food); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Food)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.FoodFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: ctx, id
func (_m *FoodRepository) FindById(ctx context.Context, id string) (entity.Food, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entity.Food, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Food); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, food
func (_m *FoodRepository) Insert(ctx context.Context, food entity.Food) entity.Food {
	ret := _m.Called(ctx, food)

	var r0 entity.Food
	if rf, ok := ret.Get(0).(func(context.Context, entity.Food) entity.Food); ok {
		r0 = rf(ctx, food)
	} else {
		r0 = ret.Get(0).(entity.Food)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, food, id
func (_m *FoodRepository) Update(ctx context.Context, food entity.Food, id string) (entity.Food, error) {
	ret := _m.Called(ctx, food, id)

	var r0 entity.Food
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Food, string) (entity.Food, error)); ok {
		return rf(ctx, food, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Food, string) entity.Food); ok {
		r0 = rf(ctx, food, id)
	} else {
		r0 = ret.Get(0).(entity.Food)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Food, string) error); ok {
		r1 = rf(ctx, food, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewFoodRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewFoodRepository creates a new instance of FoodRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFoodRepository(t mockConstructorTestingTNewFoodRepository) *FoodRepository {
	mock := &FoodRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
