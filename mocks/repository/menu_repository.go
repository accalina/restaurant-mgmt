// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/accalina/restaurant-mgmt/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/accalina/restaurant-mgmt/model"
)

// MenuRepository is an autogenerated mock type for the MenuRepository type
type MenuRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, filter
func (_m *MenuRepository) Count(ctx context.Context, filter *model.MenuFilter) int {
	ret := _m.Called(ctx, filter)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *model.MenuFilter) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx, filter
func (_m *MenuRepository) FetchAll(ctx context.Context, filter *model.MenuFilter) ([]entity.Menu, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.MenuFilter) ([]entity.Menu, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.MenuFilter) []entity.Menu); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.MenuFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filter
func (_m *MenuRepository) Find(ctx context.Context, filter *model.MenuFilter) (entity.Menu, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.MenuFilter) (entity.Menu, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.MenuFilter) entity.Menu); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.Menu)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.MenuFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, data
func (_m *MenuRepository) Save(ctx context.Context, data *entity.Menu) (*entity.Menu, error) {
	ret := _m.Called(ctx, data)

	var r0 *entity.Menu
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Menu) (*entity.Menu, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.Menu) *entity.Menu); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Menu)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.Menu) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMenuRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenuRepository creates a new instance of MenuRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenuRepository(t mockConstructorTestingTNewMenuRepository) *MenuRepository {
	mock := &MenuRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
