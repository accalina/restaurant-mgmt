// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/accalina/restaurant-mgmt/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/accalina/restaurant-mgmt/model"
)

// OrderItemRepository is an autogenerated mock type for the OrderItemRepository type
type OrderItemRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, filter
func (_m *OrderItemRepository) Count(ctx context.Context, filter *model.OrderItemFilter) int {
	ret := _m.Called(ctx, filter)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderItemFilter) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx, filter
func (_m *OrderItemRepository) FetchAll(ctx context.Context, filter *model.OrderItemFilter) ([]entity.OrderItem, error) {
	ret := _m.Called(ctx, filter)

	var r0 []entity.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderItemFilter) ([]entity.OrderItem, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderItemFilter) []entity.OrderItem); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrderItemFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filter
func (_m *OrderItemRepository) Find(ctx context.Context, filter *model.OrderItemFilter) (entity.OrderItem, error) {
	ret := _m.Called(ctx, filter)

	var r0 entity.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderItemFilter) (entity.OrderItem, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderItemFilter) entity.OrderItem); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(entity.OrderItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrderItemFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, data
func (_m *OrderItemRepository) Save(ctx context.Context, data *entity.OrderItem) (*entity.OrderItem, error) {
	ret := _m.Called(ctx, data)

	var r0 *entity.OrderItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *entity.OrderItem) (*entity.OrderItem, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *entity.OrderItem) *entity.OrderItem); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.OrderItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *entity.OrderItem) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderItemRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderItemRepository creates a new instance of OrderItemRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderItemRepository(t mockConstructorTestingTNewOrderItemRepository) *OrderItemRepository {
	mock := &OrderItemRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
