// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/accalina/restaurant-mgmt/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/accalina/restaurant-mgmt/model"
)

// OrderService is an autogenerated mock type for the OrderService type
type OrderService struct {
	mock.Mock
}

// CreateOrder provides a mock function with given fields: ctx, data
func (_m *OrderService) CreateOrder(ctx context.Context, data model.OrderCreateOrUpdateModel) (*entity.Order, error) {
	ret := _m.Called(ctx, data)

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreateOrUpdateModel) (*entity.Order, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreateOrUpdateModel) *entity.Order); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderCreateOrUpdateModel) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrder provides a mock function with given fields: ctx, id
func (_m *OrderService) DeleteOrder(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllOrder provides a mock function with given fields: ctx, filter
func (_m *OrderService) GetAllOrder(ctx context.Context, filter *model.OrderFilter) ([]model.OrderResponse, model.Meta, error) {
	ret := _m.Called(ctx, filter)

	var r0 []model.OrderResponse
	var r1 model.Meta
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderFilter) ([]model.OrderResponse, model.Meta, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *model.OrderFilter) []model.OrderResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.OrderResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *model.OrderFilter) model.Meta); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(model.Meta)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *model.OrderFilter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetDetailOrder provides a mock function with given fields: ctx, id
func (_m *OrderService) GetDetailOrder(ctx context.Context, id string) (model.OrderResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 model.OrderResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.OrderResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.OrderResponse); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.OrderResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrder provides a mock function with given fields: ctx, data
func (_m *OrderService) UpdateOrder(ctx context.Context, data model.OrderCreateOrUpdateModel) (*entity.Order, error) {
	ret := _m.Called(ctx, data)

	var r0 *entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreateOrUpdateModel) (*entity.Order, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.OrderCreateOrUpdateModel) *entity.Order); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.OrderCreateOrUpdateModel) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewOrderService interface {
	mock.TestingT
	Cleanup(func())
}

// NewOrderService creates a new instance of OrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOrderService(t mockConstructorTestingTNewOrderService) *OrderService {
	mock := &OrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
